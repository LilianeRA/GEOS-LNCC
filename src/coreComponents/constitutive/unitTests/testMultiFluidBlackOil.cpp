/*
 * ------------------------------------------------------------------------------------------------------------
 * SPDX-License-Identifier: LGPL-2.1-only
 *
 * Copyright (c) 2016-2024 Lawrence Livermore National Security LLC
 * Copyright (c) 2018-2024 TotalEnergies
 * Copyright (c) 2018-2024 The Board of Trustees of the Leland Stanford Junior University
 * Copyright (c) 2023-2024 Chevron
 * Copyright (c) 2019-     GEOS/GEOSX Contributors
 * All rights reserved
 *
 * See top level LICENSE, COPYRIGHT, CONTRIBUTORS, NOTICE, and ACKNOWLEDGEMENTS files for details.
 * ------------------------------------------------------------------------------------------------------------
 */

/**
 * @file testMultiFluidBlackOil.cpp
 */

 #include "FluidModelTest.hpp"
 #include "constitutive/fluid/multifluid/blackOil/BlackOilFluid.hpp"
 #include "common/initializeEnvironment.hpp"

using namespace geos::constitutive;

namespace geos
{
namespace testing
{

static constexpr char const * pvdgTableContent = "# Pg(Pa) Bg(m3/sm3) Visc(Pa.s)\n"
                                                 "3000000  0.04234  0.00001344\n"
                                                 "6000000  0.02046  0.0000142\n"
                                                 "9000000  0.01328  0.00001526\n"
                                                 "12000000 0.00977  0.0000166\n"
                                                 "15000000 0.00773  0.00001818\n"
                                                 "18000000 0.006426 0.00001994\n"
                                                 "21000000 0.005541 0.00002181\n"
                                                 "24000000 0.004919 0.0000237\n"
                                                 "27000000 0.004471 0.00002559 -- this is a comment\n"
                                                 "29500000 0.004194 0.00002714\n"
                                                 "31000000 0.004031 0.00002806\n"
                                                 "33000000 0.00391  0.00002832\n"
                                                 "53000000 0.003868 0.00002935";

static const char * pvtoTableContent = "# Rs[sm3/sm3]\tPbub[Pa]\tBo[m3/sm3]\tVisc(Pa.s)\n"
                                       "\n"
                                       "  2\t            2000000\t    1.02\t    0.000975\n"
                                       "  5\t            5000000\t    1.03\t    0.00091\n"
                                       " 10\t            10000000\t1.04\t    0.00083\n"
                                       " 15\t            20000000\t1.05\t    0.000695\n"
                                       "                90000000\t1.03\t    0.000985  -- some line comment\n"
                                       " 30\t            30000000\t1.07\t    0.000594\n"
                                       " 40\t            40000000\t1.08\t    0.00051\n"
                                       "                50000000\t1.07\t    0.000549  -- another one\n"
                                       "                90000000\t1.06\t    0.00074\n"
                                       " 50\t            50000000.7\t1.09\t    0.000449\n"
                                       "                90000000.7\t1.08\t    0.000605";

static const char * pvtwTableContent = "#\tPref[Pa]\tBw[m3/sm3]\tCp[1/Pa]\t    Visc[Pa.s]\n"
                                       "\t30600000.1\t1.03\t\t0.00000000041\t0.0003";

template< bool USE_MASS >
class MultiFluidBlackOilTestFixture : public FluidModelTest< BlackOilFluid, 3, 3 >,
  public ::testing::WithParamInterface<
    std::tuple< typename FluidModelTest< BlackOilFluid, 3, 3 >::TestPoint,
                typename FluidModelTest< BlackOilFluid, 3, 3 >::TestResult > >
{
public:
  using Base = FluidModelTest< BlackOilFluid, 3, 3 >;

public:
  MultiFluidBlackOilTestFixture()
  {
    writeTableToFile( pvtoFileName, pvtoTableContent );
    writeTableToFile( pvdgFileName, pvdgTableContent );
    writeTableToFile( pvtwFileName, pvtwTableContent );

    Base::createFluid( getFluidName(), []( BlackOilFluid & fluid ){
      fillPhysicalProperties( fluid );
      fluid.setMassFlag( USE_MASS );
    } );
  }

  ~MultiFluidBlackOilTestFixture() override
  {
    removeFile( pvtoFileName );
    removeFile( pvdgFileName );
    removeFile( pvtwFileName );
  }

  static string getFluidName();

private:
  static void fillPhysicalProperties( BlackOilFluid & fluid );
  static constexpr const char * pvtoFileName = "pvto.txt";
  static constexpr const char * pvdgFileName = "pvdg.txt";
  static constexpr const char * pvtwFileName = "pvtw.txt";
};

template< bool USE_MASS >
string MultiFluidBlackOilTestFixture< USE_MASS >::getFluidName()
{
  return GEOS_FMT( "fluid{}", (USE_MASS ? "Mass" : "Molar"));
}

template< bool USE_MASS >
void MultiFluidBlackOilTestFixture< USE_MASS >::fillPhysicalProperties( BlackOilFluid & fluid )
{
  string_array & phaseNames = fluid.getReference< string_array >( MultiFluidBase::viewKeyStruct::phaseNamesString() );
  phaseNames = {"oil", "water", "gas"};

  string_array & compNames = fluid.getReference< string_array >( MultiFluidBase::viewKeyStruct::componentNamesString() );
  compNames = {"oil", "water", "gas"};

  array1d< real64 > & molarWgt = fluid.getReference< array1d< real64 > >( MultiFluidBase::viewKeyStruct::componentMolarWeightString() );
  fill( molarWgt, Feed< 3 >{114e-3, 18e-3, 16e-3} );

  array1d< real64 > & surfaceDens = fluid.getReference< array1d< real64 > >( BlackOilFluidBase::viewKeyStruct::surfacePhaseMassDensitiesString() );
  fill( surfaceDens, Feed< 3 >{800.0, 1022.0, 0.9907} );

  path_array & tableNames = fluid.getReference< path_array >( BlackOilFluidBase::viewKeyStruct::tableFilesString() );
  tableNames.emplace_back( Path( pvtoFileName ));
  tableNames.emplace_back( Path( pvtwFileName ));
  tableNames.emplace_back( Path( pvdgFileName ));
}

using MultiFluidBlackOilTestMass = MultiFluidBlackOilTestFixture< true >;
using MultiFluidBlackOilTestMolar = MultiFluidBlackOilTestFixture< false >;

template< typename FIXTURE >
std::vector< typename FIXTURE::Base::TestPoint > getTestData()
{
  std::vector< typename FIXTURE::Base::TestPoint > testData;
  auto const samples = {
    Feed< 3 >{ 0.49500, 0.50000, 0.00500 },
    Feed< 3 >{ 0.60000, 0.20000, 0.20000 }
  };
  auto const pressures = { 2.000e5, 312.000e5, 800.000e5  };

  for( real64 const pressure : pressures )
  {
    for( auto const & sample : samples )
    {
      testData.emplace_back( pressure, 297.15, sample );
    }
  }
  return testData;
}

TEST_F( MultiFluidBlackOilTestMass, numericalDerivatives )
{
  BlackOilFluid * fluid = this->getFluid( this->getFluidName() );

  real64 constexpr eps = 1.0e-6;

  for( auto const & data : getTestData< MultiFluidBlackOilTestMass >())
  {
    Base::testNumericalDerivatives( fluid, data, eps );
  }
}

TEST_F( MultiFluidBlackOilTestMolar, numericalDerivatives )
{
  BlackOilFluid * fluid = this->getFluid( this->getFluidName() );

  real64 constexpr eps = 1.0e-6;

  for( auto const & data : getTestData< MultiFluidBlackOilTestMolar >())
  {
    Base::testNumericalDerivatives( fluid, data, eps );
  }
}

TEST_P( MultiFluidBlackOilTestMolar, testFluidValues )
{
  auto const [testPoint, testResult] = GetParam();

  BlackOilFluid * fluid = this->getFluid( this->getFluidName() );

  testValuesAgainstPreviousImplementation( fluid, testPoint, testResult );
}

TEST_P( MultiFluidBlackOilTestMass, testFluidValues )
{
  auto const [testPoint, testResult] = GetParam();

  BlackOilFluid * fluid = this->getFluid( this->getFluidName() );

  testValuesAgainstPreviousImplementation( fluid, testPoint, testResult );
}

//-------------------------------------------------------------------------------
// Test data
//-------------------------------------------------------------------------------

/* UNCRUSTIFY-OFF */

#define D( ... ) MultiFluidBlackOilTestMolar::ParamType( __VA_ARGS__ )
INSTANTIATE_TEST_SUITE_P(
  FluidValueTest, MultiFluidBlackOilTestMolar,
  //::testing::ValuesIn( getValueTestData< MultiFluidBlackOilTestMolar >())
  ::testing::Values(
 //| pressure  | temp  | composition           |  phase fraction                         |  phase density                         |  phase mass density                    | phase viscosity                        | phase enthalpy                         | phase internal energy                 | density
    D({1.00e+05, 297.15, {1.000, 0.000, 0.000}}, {{1.00000e+00, 0.00000e+00, 0.00000e+00}, {7.01754e+03, 0.00000e+00, 0.00000e+00}, {8.00000e+02, 0.00000e+00, 0.00000e+00}, {1.22049e-03, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 7.01754e+03}),
    D({1.00e+05, 297.15, {0.000, 1.000, 0.000}}, {{0.00000e+00, 1.00000e+00, 0.00000e+00}, {0.00000e+00, 5.44390e+04, 0.00000e+00}, {0.00000e+00, 9.79902e+02, 0.00000e+00}, {0.00000e+00, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 5.44390e+04}),
    D({1.00e+05, 297.15, {0.000, 0.000, 1.000}}, {{0.00000e+00, 0.00000e+00, 1.00000e+00}, {0.00000e+00, 0.00000e+00, 1.46242e+03}, {0.00000e+00, 0.00000e+00, 2.33987e+01}, {0.00000e+00, 0.00000e+00, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.46242e+03}),
    D({1.00e+05, 297.15, {0.500, 0.500, 0.000}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {7.01754e+03, 5.44390e+04, 0.00000e+00}, {8.00000e+02, 9.79902e+02, 0.00000e+00}, {1.22049e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.24325e+04}),
    D({1.00e+05, 297.15, {0.500, 0.000, 0.500}}, {{5.00000e-01, 0.00000e+00, 5.00000e-01}, {7.01756e+03, 0.00000e+00, 1.46242e+03}, {8.00010e+02, 0.00000e+00, 2.33987e+01}, {1.22067e-03, 0.00000e+00, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.42043e+03}),
    D({1.00e+05, 297.15, {0.000, 0.500, 0.500}}, {{0.00000e+00, 5.00000e-01, 5.00000e-01}, {0.00000e+00, 5.44390e+04, 1.46242e+03}, {0.00000e+00, 9.79902e+02, 2.33987e+01}, {0.00000e+00, 3.00000e-04, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.84832e+03}),
    D({1.00e+05, 297.15, {0.495, 0.500, 0.005}}, {{4.95000e-01, 5.00000e-01, 5.00000e-03}, {7.01756e+03, 5.44390e+04, 1.46242e+03}, {8.00010e+02, 9.79902e+02, 2.33987e+01}, {1.22067e-03, 3.00000e-04, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.20278e+04}),
    D({1.00e+05, 297.15, {0.600, 0.200, 0.200}}, {{6.00000e-01, 2.00000e-01, 2.00000e-01}, {7.01756e+03, 5.44390e+04, 1.46242e+03}, {8.00010e+02, 9.79902e+02, 2.33987e+01}, {1.22067e-03, 3.00000e-04, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 4.42608e+03}),
    D({3.12e+07, 297.15, {1.000, 0.000, 0.000}}, {{1.00000e+00, 0.00000e+00, 0.00000e+00}, {7.08046e+03, 0.00000e+00, 0.00000e+00}, {8.07172e+02, 0.00000e+00, 0.00000e+00}, {1.34933e-03, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 7.08046e+03}),
    D({3.12e+07, 297.15, {0.000, 1.000, 0.000}}, {{0.00000e+00, 1.00000e+00, 0.00000e+00}, {0.00000e+00, 5.51376e+04, 0.00000e+00}, {0.00000e+00, 9.92477e+02, 0.00000e+00}, {0.00000e+00, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 5.51376e+04}),
    D({3.12e+07, 297.15, {0.000, 0.000, 1.000}}, {{0.00000e+00, 0.00000e+00, 1.00000e+00}, {0.00000e+00, 0.00000e+00, 1.54069e+04}, {0.00000e+00, 0.00000e+00, 2.46510e+02}, {0.00000e+00, 0.00000e+00, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.54069e+04}),
    D({3.12e+07, 297.15, {0.500, 0.500, 0.000}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {7.08046e+03, 5.51376e+04, 0.00000e+00}, {8.07172e+02, 9.92477e+02, 0.00000e+00}, {1.34933e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.25494e+04}),
    D({3.12e+07, 297.15, {0.500, 0.000, 0.500}}, {{6.37645e-01, 0.00000e+00, 3.62355e-01}, {8.35456e+03, 0.00000e+00, 1.54069e+04}, {7.75681e+02, 0.00000e+00, 2.46510e+02}, {5.83920e-04, 0.00000e+00, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.00158e+04}),
    D({3.12e+07, 297.15, {0.000, 0.500, 0.500}}, {{0.00000e+00, 5.00000e-01, 5.00000e-01}, {0.00000e+00, 5.51376e+04, 1.54069e+04}, {0.00000e+00, 9.92477e+02, 2.46510e+02}, {0.00000e+00, 3.00000e-04, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.40841e+04}),
    D({3.12e+07, 297.15, {0.495, 0.500, 0.005}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {7.06812e+03, 5.51376e+04, 0.00000e+00}, {7.98839e+02, 9.92477e+02, 0.00000e+00}, {1.20431e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.25300e+04}),
    D({3.12e+07, 297.15, {0.600, 0.200, 0.200}}, {{7.65174e-01, 2.00000e-01, 3.48255e-02}, {8.35456e+03, 5.51376e+04, 1.54069e+04}, {7.75681e+02, 9.92477e+02, 2.46510e+02}, {5.83920e-04, 3.00000e-04, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.02590e+04}),
    D({1.00e+08, 297.15, {1.000, 0.000, 0.000}}, {{1.00000e+00, 0.00000e+00, 0.00000e+00}, {7.22373e+03, 0.00000e+00, 0.00000e+00}, {8.23505e+02, 0.00000e+00, 0.00000e+00}, {1.63436e-03, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 7.22373e+03}),
    D({1.00e+08, 297.15, {0.000, 1.000, 0.000}}, {{0.00000e+00, 1.00000e+00, 0.00000e+00}, {0.00000e+00, 5.67151e+04, 0.00000e+00}, {0.00000e+00, 1.02087e+03, 0.00000e+00}, {0.00000e+00, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 5.67151e+04}),
    D({1.00e+08, 297.15, {0.000, 0.000, 1.000}}, {{0.00000e+00, 0.00000e+00, 1.00000e+00}, {0.00000e+00, 0.00000e+00, 1.60079e+04}, {0.00000e+00, 0.00000e+00, 2.56127e+02}, {0.00000e+00, 0.00000e+00, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.60079e+04}),
    D({1.00e+08, 297.15, {0.500, 0.500, 0.000}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {7.22373e+03, 5.67151e+04, 0.00000e+00}, {8.23505e+02, 1.02087e+03, 0.00000e+00}, {1.63436e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.28152e+04}),
    D({1.00e+08, 297.15, {0.500, 0.000, 0.500}}, {{9.41171e-01, 0.00000e+00, 5.88289e-02}, {1.15872e+04, 0.00000e+00, 1.60079e+04}, {7.88658e+02, 0.00000e+00, 2.56127e+02}, {1.44000e-04, 0.00000e+00, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.17786e+04}),
    D({1.00e+08, 297.15, {0.000, 0.500, 0.500}}, {{0.00000e+00, 5.00000e-01, 5.00000e-01}, {0.00000e+00, 5.67151e+04, 1.60079e+04}, {0.00000e+00, 1.02087e+03, 2.56127e+02}, {0.00000e+00, 3.00000e-04, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.49685e+04}),
    D({1.00e+08, 297.15, {0.495, 0.500, 0.005}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {7.20943e+03, 5.67151e+04, 0.00000e+00}, {8.14810e+02, 1.02087e+03, 0.00000e+00}, {1.48934e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.27927e+04}),
    D({1.00e+08, 297.15, {0.600, 0.200, 0.200}}, {{8.00000e-01, 2.00000e-01, 0.00000e+00}, {8.86732e+03, 5.67151e+04, 0.00000e+00}, {7.93625e+02, 1.02087e+03, 0.00000e+00}, {8.14304e-04, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.06672e+04})
  )
);
#undef D

#define D( ... ) MultiFluidBlackOilTestMass::ParamType( __VA_ARGS__ )
INSTANTIATE_TEST_SUITE_P(
  FluidValueTest, MultiFluidBlackOilTestMass,
  //::testing::ValuesIn( getValueTestData< MultiFluidBlackOilTestMass >())
  ::testing::Values(
 //| pressure  | temp  | composition           |  phase fraction                         |  phase density                         |  phase mass density                    | phase viscosity                        | phase enthalpy                         | phase internal energy                 | density
    D({1.00e+05, 297.15, {1.000, 0.000, 0.000}}, {{1.00000e+00, 0.00000e+00, 0.00000e+00}, {8.00000e+02, 0.00000e+00, 0.00000e+00}, {8.00000e+02, 0.00000e+00, 0.00000e+00}, {1.22049e-03, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.00000e+02}),
    D({1.00e+05, 297.15, {0.000, 1.000, 0.000}}, {{0.00000e+00, 1.00000e+00, 0.00000e+00}, {0.00000e+00, 9.79902e+02, 0.00000e+00}, {0.00000e+00, 9.79902e+02, 0.00000e+00}, {0.00000e+00, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 9.79902e+02}),
    D({1.00e+05, 297.15, {0.000, 0.000, 1.000}}, {{0.00000e+00, 0.00000e+00, 1.00000e+00}, {0.00000e+00, 0.00000e+00, 2.33987e+01}, {0.00000e+00, 0.00000e+00, 2.33987e+01}, {0.00000e+00, 0.00000e+00, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.33987e+01}),
    D({1.00e+05, 297.15, {0.500, 0.500, 0.000}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {8.00000e+02, 9.79902e+02, 0.00000e+00}, {8.00000e+02, 9.79902e+02, 0.00000e+00}, {1.22049e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.80859e+02}),
    D({1.00e+05, 297.15, {0.500, 0.000, 0.500}}, {{5.00003e-01, 0.00000e+00, 4.99997e-01}, {8.00010e+02, 0.00000e+00, 2.33987e+01}, {8.00010e+02, 0.00000e+00, 2.33987e+01}, {1.22067e-03, 0.00000e+00, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 4.54677e+01}),
    D({1.00e+05, 297.15, {0.000, 0.500, 0.500}}, {{0.00000e+00, 5.00000e-01, 5.00000e-01}, {0.00000e+00, 9.79902e+02, 2.33987e+01}, {0.00000e+00, 9.79902e+02, 2.33987e+01}, {0.00000e+00, 3.00000e-04, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 4.57060e+01}),
    D({1.00e+05, 297.15, {0.495, 0.500, 0.005}}, {{4.95003e-01, 4.99997e-01, 4.99997e-03}, {8.00010e+02, 9.79902e+02, 2.33987e+01}, {8.00010e+02, 9.79902e+02, 2.33987e+01}, {1.22067e-03, 3.00000e-04, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 7.44777e+02}),
    D({1.00e+05, 297.15, {0.600, 0.200, 0.200}}, {{6.00003e-01, 1.99999e-01, 1.99999e-01}, {8.00010e+02, 9.79902e+02, 2.33987e+01}, {8.00010e+02, 9.79902e+02, 2.33987e+01}, {1.22067e-03, 3.00000e-04, 1.34400e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.05246e+02}),
    D({3.12e+07, 297.15, {1.000, 0.000, 0.000}}, {{1.00000e+00, 0.00000e+00, 0.00000e+00}, {8.07172e+02, 0.00000e+00, 0.00000e+00}, {8.07172e+02, 0.00000e+00, 0.00000e+00}, {1.34933e-03, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.07172e+02}),
    D({3.12e+07, 297.15, {0.000, 1.000, 0.000}}, {{0.00000e+00, 1.00000e+00, 0.00000e+00}, {0.00000e+00, 9.92477e+02, 0.00000e+00}, {0.00000e+00, 9.92477e+02, 0.00000e+00}, {0.00000e+00, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 9.92477e+02}),
    D({3.12e+07, 297.15, {0.000, 0.000, 1.000}}, {{0.00000e+00, 0.00000e+00, 1.00000e+00}, {0.00000e+00, 0.00000e+00, 2.46510e+02}, {0.00000e+00, 0.00000e+00, 2.46510e+02}, {0.00000e+00, 0.00000e+00, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.46510e+02}),
    D({3.12e+07, 297.15, {0.500, 0.500, 0.000}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {8.07172e+02, 9.92477e+02, 0.00000e+00}, {8.07172e+02, 9.92477e+02, 0.00000e+00}, {1.34933e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.90284e+02}),
    D({3.12e+07, 297.15, {0.500, 0.000, 0.500}}, {{5.19319e-01, 0.00000e+00, 4.80681e-01}, {7.75681e+02, 0.00000e+00, 2.46510e+02}, {7.75681e+02, 0.00000e+00, 2.46510e+02}, {5.83920e-04, 0.00000e+00, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 3.81760e+02}),
    D({3.12e+07, 297.15, {0.000, 0.500, 0.500}}, {{0.00000e+00, 5.00000e-01, 5.00000e-01}, {0.00000e+00, 9.92477e+02, 2.46510e+02}, {0.00000e+00, 9.92477e+02, 2.46510e+02}, {0.00000e+00, 3.00000e-04, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 3.94929e+02}),
    D({3.12e+07, 297.15, {0.495, 0.500, 0.005}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {7.84751e+02, 9.92477e+02, 0.00000e+00}, {7.84751e+02, 9.92477e+02, 0.00000e+00}, {9.54959e-04, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.76474e+02}),
    D({3.12e+07, 297.15, {0.600, 0.200, 0.200}}, {{6.23182e-01, 2.00000e-01, 1.76818e-01}, {7.75681e+02, 9.92477e+02, 2.46510e+02}, {7.75681e+02, 9.92477e+02, 2.46510e+02}, {5.83920e-04, 3.00000e-04, 2.80860e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 5.80653e+02}),
    D({1.00e+08, 297.15, {1.000, 0.000, 0.000}}, {{1.00000e+00, 0.00000e+00, 0.00000e+00}, {8.23505e+02, 0.00000e+00, 0.00000e+00}, {8.23505e+02, 0.00000e+00, 0.00000e+00}, {1.63436e-03, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.23505e+02}),
    D({1.00e+08, 297.15, {0.000, 1.000, 0.000}}, {{0.00000e+00, 1.00000e+00, 0.00000e+00}, {0.00000e+00, 1.02087e+03, 0.00000e+00}, {0.00000e+00, 1.02087e+03, 0.00000e+00}, {0.00000e+00, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 1.02087e+03}),
    D({1.00e+08, 297.15, {0.000, 0.000, 1.000}}, {{0.00000e+00, 0.00000e+00, 1.00000e+00}, {0.00000e+00, 0.00000e+00, 2.56127e+02}, {0.00000e+00, 0.00000e+00, 2.56127e+02}, {0.00000e+00, 0.00000e+00, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 2.56127e+02}),
    D({1.00e+08, 297.15, {0.500, 0.500, 0.000}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {8.23505e+02, 1.02087e+03, 0.00000e+00}, {8.23505e+02, 1.02087e+03, 0.00000e+00}, {1.63436e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 9.11628e+02}),
    D({1.00e+08, 297.15, {0.500, 0.000, 0.500}}, {{5.61919e-01, 0.00000e+00, 4.38081e-01}, {7.88658e+02, 0.00000e+00, 2.56127e+02}, {7.88658e+02, 0.00000e+00, 2.56127e+02}, {1.44000e-04, 0.00000e+00, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 4.12728e+02}),
    D({1.00e+08, 297.15, {0.000, 0.500, 0.500}}, {{0.00000e+00, 5.00000e-01, 5.00000e-01}, {0.00000e+00, 1.02087e+03, 2.56127e+02}, {0.00000e+00, 1.02087e+03, 2.56127e+02}, {0.00000e+00, 3.00000e-04, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 4.09512e+02}),
    D({1.00e+08, 297.15, {0.495, 0.500, 0.005}}, {{5.00000e-01, 5.00000e-01, 0.00000e+00}, {8.00023e+02, 1.02087e+03, 0.00000e+00}, {8.00023e+02, 1.02087e+03, 0.00000e+00}, {1.23999e-03, 3.00000e-04, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 8.97054e+02}),
    D({1.00e+08, 297.15, {0.600, 0.200, 0.200}}, {{6.74302e-01, 2.00000e-01, 1.25698e-01}, {7.88658e+02, 1.02087e+03, 2.56127e+02}, {7.88658e+02, 1.02087e+03, 2.56127e+02}, {1.44000e-04, 3.00000e-04, 2.93500e-05}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, {0.00000e+00, 0.00000e+00, 0.00000e+00}, 6.48646e+02})
  )
);
#undef D

/* UNCRUSTIFY-ON */

} // testing
} // geos

int main( int argc, char * * argv )
{
  ::testing::InitGoogleTest( &argc, argv );

  geos::setupEnvironment( argc, argv );

  int const result = RUN_ALL_TESTS();

  geos::cleanupEnvironment();

  return result;
}
