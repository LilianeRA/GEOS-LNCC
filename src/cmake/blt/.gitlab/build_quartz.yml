####
# This is the share configuration of jobs for quartz
.on_quartz:
  tags:
    - shell
    - quartz
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /_qnone/ || $ON_QUARTZ == "OFF"' #run except if ...
      when: never
    - if: '$CI_JOB_NAME =~ /quartz_release/'
      when: always
    - when: on_success

####
# In pre-build phase, allocate a node for builds
quartz_allocate:
  variables:
    GIT_STRATEGY: none
  extends: [.on_quartz]
  stage: allocate
  script:
    - salloc --res=ci -N 1 -t 10 --no-shell --job-name=${PROJECT_ALLOC_NAME} --mpibind=off
  needs: []

####
# In post-build phase, deallocate resources
# Note : make sure this is run even on build phase failure
quartz_release:
  variables:
    GIT_STRATEGY: none
  extends: [.on_quartz]
  stage: release
  script:
    - export JOBID=$(squeue -h --name=${PROJECT_ALLOC_NAME} --format=%A)
    - if [[ -n "${JOBID}" ]]; then scancel ${JOBID}; fi

####
# Template
.build_on_quartz:
  stage: build
  variables:
    ALLOC_COMMAND: "srun -t 15 -N 1 ${ASSIGN_ID} --interactive"
  extends: [.build_script, .on_quartz]
  needs: [quartz_allocate]

####
# Template
.run_project_integration_test_on_quartz:
  stage: build
  variables:
    ALLOC_COMMAND: "srun -t 15 -N 1 ${ASSIGN_ID} --interactive"
  extends: [.run_project_integration_tests, .on_quartz]
  needs: [quartz_allocate]

####
# Build jobs
quartz-clang_14_0_6:
  variables:
    HOST_CONFIG: "clang@14.0.6.cmake"
  extends: [.build_on_quartz]

quartz-gcc_10_3_1:
  variables:
    HOST_CONFIG: "gcc@10.3.1.cmake"
  extends: [.build_on_quartz]

quartz-gcc_10_3_1-export-tpls:
  variables:
    HOST_CONFIG: "gcc@10.3.1-export-tpls.cmake"
  extends: [.build_on_quartz]

quartz-intel_2022_1_0_cxx17:
  variables:
    HOST_CONFIG: "intel@2022.1.0-c++17.cmake"
  extends: [.build_on_quartz]

####
# HIP project tests
quartz_openmp_mpi_fortran_tests:
  variables:
    ENABLED_BLT_TESTS: "mpi-cpp-fortran,openmp-cpp-fortran,openmp-mpi-cpp"
    HOST_CONFIG: "clang@14.0.6.cmake"
  extends: [.run_project_integration_test_on_quartz]
